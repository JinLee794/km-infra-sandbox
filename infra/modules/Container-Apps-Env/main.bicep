targetScope = 'resourceGroup'

param suffix string = uniqueString(resourceGroup().id)

@description('The location where the resources will be created.')
param location string = ''

@description('Optional. The tags to be assigned to the created resources.')
param tags object = {}

@description('The name of the container apps environment. If set, it overrides the name generated by the template.')
param containerAppsEnvironmentName string = 'km-cae-${suffix}'

// @description('The name of the log analytics workspace. If set, it overrides the name generated by the template.')
// param logAnalyticsWorkspaceName string = 'km-log-e726b8'

// @description(' The name of the application insights. If set, it overrides the name generated by the template.')
// param applicationInsightsName string = 'km-appins-${suffix}'

param infraSubnetId string = '/subscriptions/22e39941-34af-48d2-8d93-3e35f5d796a9/resourceGroups/hygeia-km-svc/providers/Microsoft.Network/virtualNetworks/km-vnet-e726b8/subnets/lly-bicep-infra-subnet'

// resource logAnalyticsWorkspace 'Microsoft.OperationalInsights/workspaces@2021-06-01' existing = {
//   name: logAnalyticsWorkspaceName
// }

// resource applicationInsights 'Microsoft.Insights/components@2020-02-02' existing = {
//   name: applicationInsightsName
// }

// Api-Version in KM Repo is Microsoft.App/managedEnvironments@2022-10-01
// ----------------------
resource containerAppsEnvironment 'Microsoft.App/managedEnvironments@2022-11-01-preview' = {
  name: containerAppsEnvironmentName
  location: location
  tags: tags

  // KM provided properties
  // ----------------------
  // properties: {
  //   daprAIInstrumentationKey: applicationInsights.properties.InstrumentationKey
  //   appLogsConfiguration: {
  //     destination: 'log-analytics'
  //     logAnalyticsConfiguration: {
  //       customerId: logAnalyticsWorkspace.properties.customerId
  //       sharedKey: logAnalyticsWorkspace.listKeys().primarySharedKey
  //     }
  //   }


  properties: {
    vnetConfiguration: {
      internal: true
      infrastructureSubnetId: infraSubnetId
    }
    zoneRedundant: false
    // infrastructureResourceGroup: infrastructureResourceGroupName
    appLogsConfiguration: {
      // destination: 'log-analytics'
      // logAnalyticsConfiguration: {
      //   customerId: logAnalyticsWorkspace.properties.customerId
      //   sharedKey: logAnalyticsWorkspace.listKeys().primarySharedKey
      // }
    }
    workloadProfiles: [
      {
        maximumCount: 3
        minimumCount: 1
        name: 'test'
        workloadProfileType: 'D4'
      }
    ]
  }
}
output containerAppsEnvironmentName string = containerAppsEnvironment.name
output containerAppsEnvironmentId string = containerAppsEnvironment.id
output containerAppsEnvironmentDomain string = containerAppsEnvironment.properties.defaultDomain
output containerAppsEnvironmentStaticIp string = containerAppsEnvironment.properties.staticIp

/*
output containerAppsEnvironmentName string = containerAppsEnvironment.name
output containerAppsEnvironmentId string = containerAppsEnvironment.id

output logAnalyticsWorkspaceName string = 'z1-dev-ed-law-01'

@description('The name of the application insights.')
output applicationInsightsName string = applicationInsights.name

output applicationInsightsInstrumentationKey string = applicationInsights.properties.InstrumentationKey
output applicationInsightsConnectionString string = applicationInsights.properties.ConnectionString
*/
